#!/usr/bin/env ruby

require 'pathname'
require 'json'
require 'bson'
require_relative "./sde"

unless File.exist? 'tmp/cache/universe.cache'
  puts 'run make-cache first'
  exit 1
end

# rubocop:disable Metrics/AbcSize, Metrics/LineLength, Metrics/CyclomaticComplexity
def aliases(name)
  aliases = [name.upcase]
  return aliases unless name.include? '-'
  aliases << "#{Regexp.last_match(1)}-#{Regexp.last_match(2)}" if name =~ /^([a-z]).+\-([a-z])/i
  aliases << "#{Regexp.last_match(1)}#{Regexp.last_match(2)}" if name =~ /^([a-z])\-([a-z])/i
  aliases << Regexp.last_match(1).to_s if name =~ /^(\w\-\w)/i
  aliases << Regexp.last_match(1).to_s if name =~ /(\w\-\w)$/i
  aliases << Regexp.last_match(1).to_s if name =~ /^(\w{2})\w+/i
  aliases << Regexp.last_match(1).to_s if name =~ /^(\w{3})\-/i
  aliases
end
# rubocop:enable Metrics/AbcSize, Metrics/LineLength, Metrics/CyclomaticComplexity

SYSTEMS = {} # rubocop:disable Style/MutableConstant
ROUTES = [] # rubocop:disable Style/MutableConstant

stargates = {}
names = {}

# rubocop:disable Security/MarshalLoad
Marshal.load(File.read('tmp/cache/universe.cache')).each do |data|
  other_names = aliases(data[:name])

  pp other_names if data[:name] == "AGG-NR"
  system = {
    id: data[:id].to_s,
    name: data[:name],
    constelation: data[:constelation],
    region: data[:region],
    aliases: other_names,
    neighbours: data[:stargates].values
  }

  SYSTEMS[system[:id]] = system
  # SYSTEMS[system[:name]] = system

  other_names.each do |name|
    (names[name] ||= []) << system[:id]
  end

  data[:stargates].each_key do |from|
    stargates[from] = system
  end
end
# rubocop:enable Security/MarshalLoad

SYSTEMS.each_value do |system|
  system[:neighbours].map! { |id| stargates.dig(id, :id) }
end

aliases = SYSTEMS.values.each_with_object({}) do |system, a|
  system[:aliases].each do |name|
    (a[name] ||= []) << system[:id]
  end
end

words = File.read("data/stop_words.txt").each_line.map(&:strip)

File.write("universe.bson",
  {
    systems: SYSTEMS,
    system_aliases: aliases,
    ships: Sde.ships,
    stop_words: words
  }.to_bson
)

content = File.binread("universe.bson")
buffer = BSON::ByteBuffer.new(content)
universe = Hash.from_bson(buffer).freeze
